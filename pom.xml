<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>de.thatsich</groupId>
	<artifactId>sound-processing</artifactId>
	<version>1.0-SNAPSHOT</version>

	<properties>
		<!-- javac build variables -->
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
	</properties>

	<repositories>
		<repository>
			<id>git-thatsIch</id>
			<name>thatsIch's Git based repo</name>
			<url>https://github.com/thatsIch/maven-repo/raw/master/</url>
		</repository>
	</repositories>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.apache.logging.log4j</groupId>
				<artifactId>log4j-bom</artifactId>
				<version>2.5</version>
				<scope>import</scope>
				<type>pom</type>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<dependencies>
		<!--
			Inofficial soundcloud java API wrapper

			grants easier access to their REST API
		-->
		<dependency>
			<groupId>nok</groupId>
			<artifactId>soundcloud-java-library</artifactId>
			<version>0.2.1</version>
		</dependency>

		<!--
			used to download an URL easily

			http://mvnrepository.com/artifact/commons-io/commons-io
		-->
		<dependency>
			<groupId>commons-io</groupId>
			<artifactId>commons-io</artifactId>
			<version>2.5</version>
		</dependency>


		<!-- music player and codec library -->
		<!-- http://mvnrepository.com/artifact/com.googlecode.soundlibs/jlayer -->
		<dependency>
			<groupId>com.googlecode.soundlibs</groupId>
			<artifactId>jlayer</artifactId>
			<version>1.0.1-2</version>
		</dependency>

		<!-- handles authentication within a native bundled browser -->
		<dependency>
			<groupId>com.microsoft.alm</groupId>
			<artifactId>oauth2-useragent</artifactId>
			<version>0.8.1</version>
		</dependency>

		<!-- logging -->
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-api</artifactId>
		</dependency>
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-core</artifactId>
		</dependency>

		<!-- test dependencies -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.12</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.assertj</groupId>
			<artifactId>assertj-core</artifactId>
			<version>3.4.1</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-core</artifactId>
			<version>2.0.54-beta</version>
			<scope>test</scope>
		</dependency>

	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<source>1.8</source>
					<target>1.8</target>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>

				<configuration>
					<archive>
						<manifest>
							<addClasspath>true</addClasspath>
							<mainClass>
								de.thatsich.soundcloud.player.JavaFXTrayIcon
							</mainClass>
						</manifest>
					</archive>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-source-plugin</artifactId>
				<executions>
					<execution>
						<id>attach-sources</id>
						<goals>
							<goal>jar</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-javadoc-plugin</artifactId>
				<executions>
					<execution>
						<id>attach-javadocs</id>
						<goals>
							<goal>jar</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

		</plugins>
	</build>

	<profiles>
		<profile>
			<id>izpack-packaging</id>

			<properties>
				<!-- izPack variables -->
				<izpack.version>5.0.8</izpack.version>
				<izpack.staging>${project.build.directory}/staging</izpack.staging>
				<info.appName>My Killer Application</info.appName>
				<info.appsubpath>my-killer-app/standard</info.appsubpath>
				<izpack.dir.app>${basedir}/src/main/izpack</izpack.dir.app>
				<staging.dir.app>${izpack.staging}/appfiles</staging.dir.app>
			</properties>

			<build>
				<plugins>
					<!-- copy izpack resources into izpack staging area, expected by izpack.xml -->
					<plugin>
						<artifactId>maven-antrun-plugin</artifactId>
						<executions>
							<execution>
								<id>create-staging-area</id>
								<phase>process-resources</phase>
								<goals>
									<goal>run</goal>
								</goals>
								<configuration>
									<tasks>
										<copy todir="${izpack.staging}">
											<fileset
												dir="${basedir}/src/izpack"/>
										</copy>
									</tasks>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<artifactId>maven-dependency-plugin</artifactId>
						<configuration>
							<excludeTransitive>false</excludeTransitive>
							<stripVersion>true</stripVersion>
							<overWriteReleases>true</overWriteReleases>
							<overWriteSnapshots>true</overWriteSnapshots>
							<overWriteIfNewer>true</overWriteIfNewer>
							<excludeScope>system</excludeScope>
						</configuration>
						<executions>
							<execution>
								<!-- copy product jars to izpack staging lib -->
								<id>copy-product-dependencies</id>
								<phase>prepare-package</phase>
								<goals>
									<goal>copy-dependencies</goal>
								</goals>
								<configuration>
									<outputDirectory>${izpack.staging}/lib
									</outputDirectory>
									<excludeScope>system</excludeScope>
									<!-- this excludes tools.jar, e.g. -->
									<excludeArtifactIds>mycustompanels
									</excludeArtifactIds>
									<excludeGroupIds>org.codehaus.izpack
									</excludeGroupIds>
								</configuration>
							</execution>
							<execution>
								<!-- copy izpack custom (custom panels, etc.) jars to izpack staging custom -->
								<id>copy-izpack-dependencies</id>
								<phase>prepare-package</phase>
								<goals>
									<goal>copy-dependencies</goal>
								</goals>
								<configuration>
									<outputDirectory>${izpack.staging}/custom
									</outputDirectory>
									<includeArtifactIds>mycustompanels
									</includeArtifactIds>
								</configuration>
							</execution>
						</executions>
					</plugin>

					<!--
						izPack
						pakcage once, deploy everywhere.

						IzPack is a widely used tool for packaging applications on the Java™ platform.

						Easily make installers that work seamlessly on Microsoft Windows™,
						Linux™, Solaris™ and Mac OS X™. Keep your users happy just right
						before they get their hands on your software for the first time.
					-->
					<plugin>
						<groupId>org.codehaus.izpack</groupId>
						<artifactId>izpack-maven-plugin</artifactId>
						<version>5.0.8</version>
						<executions>
							<execution>
								<phase>package</phase>
								<goals>
									<goal>izpack</goal>
								</goals>
								<configuration>
									<!-- base for relative paths in izpack descriptor -->
									<baseDir>${staging.dir.app}</baseDir>
									<installFile>${izpack.dir.app}/install.xml</installFile>
									<outputDirectory>${project.build.directory}
									</outputDirectory>
									<finalName>${project.build.finalName}</finalName>
									<enableOverrideArtifact>true</enableOverrideArtifact>
									<mkdirs>true</mkdirs>
									<autoIncludeUrl>false</autoIncludeUrl>
									<autoIncludeDevelopers>false</autoIncludeDevelopers>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
</project>
